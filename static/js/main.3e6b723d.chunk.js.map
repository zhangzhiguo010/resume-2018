{"version":3,"sources":["Child.js","data/action.js","data/store.js","data/reducer.js","App.js","serviceWorker.js","index.js"],"names":["Child","connect","state","status","dispatch","_this","this","handelClick","props","type","payload","react_default","a","createElement","className","onClick","Component","store","createStore","initState","arguments","length","undefined","action","Object","assign","App","es","src_Child","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oPAyBeA,EApBdC,YACG,SAACC,GAAS,MAAO,CAACC,OAAQD,EAAMC,SAChC,SAACC,GAAY,MAAO,CAACA,SAAUA,oMAGX,IAAAC,EAAAC,KAChBA,KAAKC,YAAc,WACfF,EAAKG,MAAMJ,SCXZ,CACHK,KAAM,QACNC,QAAS,CACLP,OAAQ,uCDYZ,OACIQ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAUC,QAAST,KAAKC,aAAvC,sCAEKD,KAAKE,MAAML,eAVRa,wBELpB,IACeC,EADDC,YCJC,WAA8C,IAA7BC,EAA6BC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAnB,CAACjB,OAAO,GAAIoB,EAAOH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACzD,OAAOC,EAAOd,MACV,IAAK,QACD,OAAOe,OAAOC,OAAO,GAAIN,EAAW,CAAChB,OAAQoB,EAAOb,QAAQP,SAChE,QACI,OAAOgB,KCaJO,mLAXP,OACIf,EAAAC,EAAAC,cAACc,EAAA,EAAD,CAAUV,MAAOA,GACbN,EAAAC,EAAAC,cAAA,+CAEIF,EAAAC,EAAAC,cAACe,EAAD,eANFZ,aCOEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3e6b723d.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport {connect} from 'react-redux'\r\nimport action from './data/action'\r\nimport './child.css'\r\n\r\n@connect(\r\n    (state)=>{return {status: state.status}},\r\n    (dispatch)=>{return {dispatch: dispatch}}\r\n)\r\nclass Child extends Component{\r\n    componentWillMount(){\r\n        this.handelClick = ()=>{\r\n            this.props.dispatch(action())\r\n        }\r\n    }\r\n    render(){\r\n        return (\r\n            <div className=\"wrapper\" onClick={this.handelClick}>\r\n                这里是Child组件\r\n                {this.props.status}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Child","export default function action(){\r\n    return {\r\n        type: 'CLICK',\r\n        payload: {\r\n            status: 1\r\n        }\r\n    }\r\n}","import {createStore} from 'redux'\r\nimport reducer from './reducer'\r\n\r\n\r\nconst store = createStore(reducer)\r\nexport default store","export default function reducer(initState={status:0}, action){\r\n    switch(action.type){\r\n        case 'CLICK':\r\n            return Object.assign({}, initState, {status: action.payload.status})\r\n        default:\r\n            return initState\r\n    }\r\n}","import React, {Component} from 'react'\r\nimport Child from './Child'\r\nimport {Provider} from 'react-redux'\r\nimport store from './data/store'\r\n\r\nclass App extends Component{\r\n    render(){\r\n        return (\r\n            <Provider store={store}>\r\n                <div>\r\n                    这里是App组件\r\n                    <Child />\r\n                </div>\r\n            </Provider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}